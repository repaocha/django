使用django-admin.py来创建HelloWorld项目:
django-admin.py startproject HelloWorld

$ cd HelloWorld/        #项目的一个容器,它的命名对Django无关紧要
$ tree
.
|-- HelloWorld           #项目的真正的Python包,它是你导入任何东西时将需要使用的Python包的名字
|   |-- __init__.py       #一个空的文件，告诉python该目录是一个python包
|   |-- settings.py      #该python项目的配置
|   |-- urls.py           #该python项目的URL声明
|   `-- wsgi.py           #用于项目的与WSGI兼容的Web服务器入口
`-- manage.py             #一个命令行工具，可以让你以各种方式与该django项目进行交换


启动服务器:
python manage.py runserver 0.0.0.0:8000

$ tree
.
|-- HelloWorld
|   |-- __init__.py
|   |-- __init__.pyc
|   |-- settings.py
|   |-- settings.pyc
|   |-- urls.py              # url 配置
|   |-- urls.pyc
|   |-- view.py              # 添加的视图文件
|   |-- view.pyc             # 编译后的视图文件
|   |-- wsgi.py
|   `-- wsgi.pyc
`-- manage.py

url() 函数:
regex: 正则表达式，与之匹配的 URL 会执行对应的第二个参数 view。必选参数
view: 用于执行与正则表达式匹配的 URL 请求。必选参数
kwargs: 视图使用的字典类型的参数。
name: 用来反向获取 URL。

变量使用双括号

django模板标签
if/else 标签
{% if condition1 %}
    ...display1
{% elif comdition2 %}
    ...display2
{% endif %}
根据条件判断是否输出,支持嵌套

for 标签
{% for %} 允许在一个序列上迭代。
与Python的 for 语句的情形类似，循环语法是 for X in Y ，Y是要迭代的序列而X是在每一个特定的循环中使用的变量名称。
每一次循环中，模板系统会渲染在 {% for %} 和 {% endfor %} 之间的所有内容。 

ifequal/ifnotequal 标签

要使用模型，必须要创建一个app

创建一个 TestModel 的 app:
django-admin.py startapp TestModel

HelloWorld
|-- TestModel
|   |-- __init__.py
|   |-- admin.py
|   |-- models.py
|   |-- tests.py
|   `-- views.py

在settings.py中找到INSTALLED_APPS这一项,添加TestModel.

python manage.py makemigrations TestModel   # 让 Django 知道我们在我们的模型有一些变更
python manage.py migrate TestModel    # 创建表结构

添加数据需要先创建对象

数据库配置-->定义模型-->数据库操作(添加数据,获取数据,更新数据,删除数据)

Django 表单
HTTP 请求:GET,POST
Request 对象

Admin 管理工具
激活管理工具:生成项目时会在 urls.py 中自动设置好
使用管理工具:启动开发服务器，然后在浏览器中访问     可以通过命令 python manage.py createsuperuser 来创建超级用户
内联(Inline)显示

启用 USE_TZ = True 后,获取当前时间:
import datetime 
from django.utils.timezone import utc
utcnow = datetime.datetime.utcnow().replace(tzinfo=utc)

migrate:运行这些迁移文件并自动管理你的数据库模式的命令.
sqlmigrate:接收迁移文件的名字并返回它们的SQL语句的命令.

实现模型变更的三个步骤：
修改你的模型（在models.py文件中)
运行python manage.py makemigrations ，为这些修改创建迁移文件
运行python manage.py migrate ，将这些改变更新到数据库中

include()函数的正则表达式的末尾没有$（字符串结束符号）而是一个斜线.

渲染render():将请求对象作为它的第一个参数，模板的名字作为它的第二个参数，一个字典作为它可选的第三个参数.

get_object_or_404: 使用get()并在对象不存在时引发Http404.
